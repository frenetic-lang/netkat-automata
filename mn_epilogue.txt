    ###### Start of static Mininet epilogue ######
    # Set up logging etc.
    lg.setLogLevel('info')
    lg.setLogLevel('output')

    # Start the network and prime other ARP caches
    net.start()
    net.staticArp()

    # Run agent and monitor on each host
    start_agents_and_monitors(net.hosts)

    if args.name == "cli":
        # Enter CLI mode
        output("Network ready\n")
        output("Press Ctrl-d or type exit to quit\n")
        CLI(net)
    elif args.name == "series":
        output("sleeping to let agents and monitors boot...\n")
        time.sleep(5)
        output("sleeping done!\n")
        h1.cmd("python config_monitors.py &> config.txt")
        h2.cmd("python {} &".format(args.traffic_py))
        h1.cmd("python timeseries.py -q {} {} -n {} -t {} > timeseries.csv".format(
            args.query, "-v" if args.verbose else "", args.num_queries, args.time
        ))
    else:
        assert args.name == "matrix"
        output("sleeping to let agents and monitors boot...\n")
        time.sleep(5)
        output("sleeping done!\n")
        h1.cmd("python config_monitors.py &> config.txt")
        h2.cmd("python {} &".format(args.traffic_py))
        h1.cmd("python matrix.py -q {} {} -n {} -t {} > timeseries.csv".format(
            args.query, "-v" if args.verbose else "", args.num_queries, args.time
        ))
    call(["pkill", "-f", "python ./monitor.py"])
    call(["pkill", "-f", "python ./agent.py"])
    call(["pkill", "-9", "-f", "iperf"])
    net.stop()

def parse_args():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="name")
    cliparser = subparsers.add_parser("cli", help="CLI")
    seriesparser = subparsers.add_parser("series", help="time series")
    matrixparser = subparsers.add_parser("matrix", help="traffic matrix")
    util.config_parser(seriesparser)
    util.config_time_parser(seriesparser)
    util.config_mn_parser(seriesparser)
    util.config_parser(matrixparser)
    util.config_time_parser(matrixparser)
    util.config_mn_parser(matrixparser)
    return parser.parse_args()

def main():
    start(parse_args())

if __name__ == "__main__":
    main()
